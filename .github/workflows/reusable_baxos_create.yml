name: Reusable Project Creation

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy (dev/prod)'
        required: true
        type: string
      action:
        description: 'Action to perform (e.g., resourcesCreate, resourcesDelete)'
        required: true
        type: string
      projectName:
        description: 'Name of the project (corresponds to folder in terraform/projects)'
        required: true
        type: string
      additionalArgs:
        description: 'Optional extra arguments for run.sh (e.g. -A /path/to/script)'
        required: false
        type: string
        default: ""
    secrets:
      ARM_CLIENT_ID:
        required: true
      ARM_CLIENT_CERT_BASE64:
        required: true
      ARM_TENANT_ID:
        required: true
      ARM_SUBSCRIPTION_ID:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_DEFAULT_REGION:
        required: true
      BAXOS_SRC_PROJECT_GIT_REPO:
        required: false
      ACR_REGISTRY_NAME:
        required: false
      GH_TOKEN:
        required: false
      AZDO_TOKEN:
        required: false
      AZDO_PIPELINE_ORGANIZATION:
        required: false
      AZDO_PIPELINE_PROJECT:
        required: false
      AZDO_PIPELINE_NAME:
        required: false

jobs:
  execute_run_script:
    runs-on: ubuntu-latest
    env:
      MY_TERRAFORM_VERSION: 1.11.4
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      # - name: Install dependencies
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y git curl

      - name: Install terraform
        run: |
          git clone https://github.com/tfutils/tfenv.git ~/.tfenv
          export PATH="$HOME/.tfenv/bin:$PATH" # Add tfenv to PATH for this step
          echo "$HOME/.tfenv/bin" >> $GITHUB_PATH # Add tfenv to GITHUB_PATH for subsequent steps
          tfenv install $MY_TERRAFORM_VERSION
          tfenv use $MY_TERRAFORM_VERSION
          terraform --version

      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb |sudo bash
          az --version
          az extension add --name azure-devops || true

      - name: Install Github CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Execute run.sh
        env:
          FOLDER_ROOT: ${{ github.workspace }}
          LOG_VERBOSE: $${{ vars.LOG_VERBOSE }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_CERT_PATH: ${{ github.workspace }}/.certs/azure-sp.pem
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          TF_VAR_BAXOS_SRC_PROJECT_GIT_REPO: ${{ secrets.BAXOS_SRC_PROJECT_GIT_REPO }}

          ACR_REGISTRY_NAME: ${{ secrets.ACR_REGISTRY_NAME }}

          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GH_REPO: baxpick/cpctelera_example

          AZDO_TOKEN: ${{ secrets.AZDO_TOKEN }}
          AZDO_PIPELINE_ORGANIZATION: ${{ secrets.AZDO_PIPELINE_ORGANIZATION }}
          AZDO_PIPELINE_PROJECT: ${{ secrets.AZDO_PIPELINE_PROJECT }}
          AZDO_PIPELINE_NAME: ${{ secrets.AZDO_PIPELINE_NAME }}

          BAXOS_FILE_SHARE_SANAME: "sa${{ inputs.projectName }}build${{ inputs.environment }}"
          BAXOS_FILE_SHARE_NAME: "share${{ inputs.projectName }}build${{ inputs.environment }}"
          BAXOS_FILE_SHARE_RG: "${{ inputs.projectName }}-${{ inputs.environment }}-all-rg"

        run: |
          ./bash/run.sh \
            -e ${{ inputs.environment }} \
            -a ${{ inputs.action }} \
            -p ${{ inputs.projectName }} \
            -s refresh \
            ${{ inputs.additionalArgs }}
